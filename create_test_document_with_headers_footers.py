#!/usr/bin/env python3
"""
Create a test Word document with headers and footers for testing
"""

from docx import Document
from docx.shared import Inches, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
import os
from PIL import Image, ImageDraw

def create_test_images():
    """Create simple test images for headers/footers"""
    images_created = []
    
    # Create a small logo-like image for header
    img1 = Image.new('RGB', (100, 50), color='lightblue')
    draw1 = ImageDraw.Draw(img1)
    draw1.text((5, 15), "LOGO", fill='darkblue')
    img1_path = 'test_header_logo.png'
    img1.save(img1_path)
    images_created.append(img1_path)
    
    return images_created

def create_test_document_with_headers_footers():
    """Create a test Word document with headers and footers"""
    doc = Document()
    
    # Get the first section (default section)
    section = doc.sections[0]
    
    # Create test images
    print("Creating test images for headers/footers...")
    test_images = create_test_images()
    
    # ===== HEADER SETUP =====
    header = section.header
    
    # Add header content
    header_para = header.paragraphs[0]
    header_para.text = "GIACONVERT Test Document - Company Name"
    header_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Make header text bold and colored
    for run in header_para.runs:
        run.bold = True
        run.font.color.rgb = RGBColor(0, 50, 150)  # Dark blue
    
    # Add a second paragraph in header with different alignment
    header_para2 = header.add_paragraph()
    header_para2.text = "Internal Document - Confidential"
    header_para2.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    for run in header_para2.runs:
        run.italic = True
        run.font.color.rgb = RGBColor(150, 150, 150)  # Gray
    
    # Add logo image to header if available
    if os.path.exists(test_images[0]):
        header_para3 = header.add_paragraph()
        header_para3.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
        run = header_para3.runs[0] if header_para3.runs else header_para3.add_run()
        run.add_picture(test_images[0], width=Inches(0.8))
    
    # ===== FOOTER SETUP =====
    footer = section.footer
    
    # Add footer content
    footer_para = footer.paragraphs[0]
    footer_para.text = "Page "
    footer_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Add page number field (this is tricky in python-docx, so we'll simulate)
    footer_para.add_run("1").bold = True  # Simulated page number
    footer_para.add_run(" of Document")
    
    # Add a second footer paragraph
    footer_para2 = footer.add_paragraph()
    footer_para2.text = "Generated by GIACONVERT • © 2025 • https://github.com/giarcheuli/GIACONVERT"
    footer_para2.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    for run in footer_para2.runs:
        run.font.size = Inches(0.1)  # Small text
        run.font.color.rgb = RGBColor(100, 100, 100)  # Gray
    
    # ===== DOCUMENT CONTENT =====
    
    # Title
    title = doc.add_heading('Test Document with Headers and Footers', 0)
    
    # Introduction
    intro = doc.add_paragraph('This document tests the ')
    intro.add_run('header and footer conversion').bold = True
    intro.add_run(' functionality of GIACONVERT.')
    
    # Add some content to make multiple pages
    doc.add_paragraph('Content Section 1: This is the first section of the document.')
    
    # Add a table
    table = doc.add_table(rows=3, cols=3)
    table.style = 'Table Grid'
    
    # Fill table
    headers = ['Feature', 'Status', 'Notes']
    for i, header in enumerate(headers):
        table.cell(0, i).text = header
        table.cell(0, i).paragraphs[0].runs[0].bold = True
    
    data = [
        ['Headers', '✅ Testing', 'Company name and logo'],
        ['Footers', '✅ Testing', 'Page numbers and copyright']
    ]
    
    for row_idx, row_data in enumerate(data, 1):
        for col_idx, cell_data in enumerate(row_data):
            table.cell(row_idx, col_idx).text = cell_data
    
    # Add more content
    doc.add_paragraph('Content Section 2: This section demonstrates that headers and footers should appear on every page when the document is converted to HTML.')
    
    doc.add_paragraph('Content Section 3: The converter should extract the header and footer content and include it in the HTML output with appropriate styling.')
    
    # Page break simulation (add enough content)
    for i in range(10):
        doc.add_paragraph(f'Additional paragraph {i+1}: This is extra content to simulate multiple pages and ensure headers and footers are visible.')
    
    # Final paragraph
    conclusion = doc.add_paragraph()
    conclusion.add_run('This document demonstrates ').font.size = 14
    underlined_run = conclusion.add_run('header and footer features')
    underlined_run.underline = True
    underlined_run.font.color.rgb = RGBColor(255, 0, 0)
    conclusion.add_run(' that should be preserved in the HTML conversion.')
    
    # Clean up test images
    for img_path in test_images:
        try:
            os.remove(img_path)
        except OSError:
            pass
    
    return doc

def main():
    # Create test directory
    test_dir = 'test_documents'
    os.makedirs(test_dir, exist_ok=True)
    
    # Create and save test document with headers and footers
    doc = create_test_document_with_headers_footers()
    doc_path = os.path.join(test_dir, 'sample_document_with_headers_footers.docx')
    doc.save(doc_path)
    
    print(f"✅ Test document with headers and footers created: {doc_path}")
    print("You can now explore headers/footers with:")
    print(f"python3 debug_headers_footers.py {doc_path}")
    print("And test conversion once headers/footers support is implemented!")

if __name__ == '__main__':
    main()